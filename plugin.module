<?php


/**
 * Get the plugin type info array of a plugin type.
 *
 * @see hook_plugin_type_info()
 * @see hook_plugin_type_info_alter()
 *
 * @param $type
 *   The plugin type for which the info shall be returned, or NULL
 *   to return an array with info about all types.
 */
function plugin_type_get_info($type = NULL) {
  $type_info = &drupal_static(__FUNCTION__, array());

  if (empty($type_info)) {
    if ($cache = cache_get('plugin_type_info')) {
      $type_info = $cache->data;
    }
    else {
      $type_info = module_invoke_all('plugin_type_info');
      // Merge in default values.
      foreach ($type_info as $name => $data) {
        $type_info[$name] += plugin_type_defaults();
      }
      // Let other modules alter the type info.
      drupal_alter('plugin_type_info', $type_info);
      cache_set('plugin_type_info', $type_info);
    }
  }

  return empty($type) ? $type_info : $type_info[$type];
}

/**
 * Get the plugin type info array of a plugin type.
 *
 * @see hook_plugin_$type_info()
 * @see hook_plugin_$type_info_alter()
 *
 * @param $type
 *   The plugin type for which the info shall be returned.
 * @param $plugin
 *   The plugin for which the info shall be returned, or NULL
 *   to return an array with info about all plugins of this type.
 */
function plugin_get_info($type, $plugin = NULL) {
  $plugin_info = &drupal_static(__FUNCTION__, array());

  $info_key = 'plugin_info_' . $type;

  if (empty($plugin_info[$type])) {
    if ($cache = cache_get($info_key)) {
      $plugin_info[$type] = $cache->data;
    }
    else {
      $controller = plugin_controller($type);

      // The preferred place to register a plugin is via the type-specific
      // plugin info hook.
      $plugin_info[$type] = module_invoke_all('plugin_' . $type . '_info');

      // Registration via info files is also supported.
      $modules = system_get_info('module');
      //dpm($modules);
      foreach ($modules as $module => $info) {
        if (!empty($info['plugins'][$type])) {
          foreach ($info['plugins'][$type] as $plugin_key => $file) {
            $plugin_info[$type][$plugin_key] = drupal_parse_info_file(drupal_get_path('module', $module) . '/' . $file);
          }
        }
      }

      // Merge in default data.  Type-specific defaults take priority
      // over generic defaults, allowing controllers to override the global
      // defaults if desired.
      foreach ($plugin_info[$type] as $plugin_key => &$data) {
        $controller->setPluginDefaults($data);
        $plugin_info[$type][$plugin_key] += plugin_defaults();
      }
      unset($data);

      // Let other modules alter the plugin info.
      drupal_alter($info_key, $plugin_info[$type]);

      cache_set($info_key, $plugin_info[$type]);
    }
  }

  if (!empty($plugin)) {
    return $plugin_info[$type][$plugin];
  }

  return $plugin_info[$type];
}

/**
 * Default values for plugin type definitions.
 */
function plugin_type_defaults() {
  return array(
    'title' => '',
    'description' => '',
    'interface' => 'PluginInterface',
    'config' => 'PluginConfigInterface',
    'controller' => 'PluginControllerVariableReuse',
    'default' => '',
  );
}

/**
 * Default values for plugin definitions.
 */
function plugin_defaults() {
  return array(
    'title' => '',
    'description' => '',
    'class' => 'PluginBase',
    'config' => 'PluginConfigNull',
  );
}

/**
 * Retrieve the plugin attached to the specified type and routing data.
 *
 * @param $type
 *   The plugin type for which we want a plugin.
 * @param array $routing
 *   The routing information to determine what plugin we want.
 *   The keys of the array are controller-dependent.
 * @return PluginInterface
 */
function plugin($type, array $routing = array()) {
  return plugin_controller($type)->load($routing);
}

/**
 * Retrieve the controller object for a given plugin type.
 *
 * @param $type
 *   The plugin type for which we want the controller
 * @return PluginControllerInterface
 */
function plugin_controller($type) {
  $controllers = &drupal_static(__FUNCTION__ . '_controllers', array());

  if (empty($controllers[$type])) {
    $type_info = plugin_type_get_info($type);
    $controllers[$type] = new $type_info['controller']($type);
  }

  return $controllers[$type];
}
