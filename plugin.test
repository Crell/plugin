<?php

class PluginTestCase extends DrupalWebTestCase {
  protected $regions;

  public static function getInfo() {
    return array(
      'name' => 'Plugin tests',
      'description' => 'Basic plugin tests.',
      'group' => 'Plugin',
    );
  }

  function setUp() {
    parent::setUp('plugin', 'plugin_test');
  }

  /**
   * Confirm that a new plugin type registers properly.
   */
  function testTypeRegistration() {
    $types = plugin_type_get_info();
    $type_names = array_keys($types);
    $this->assertTrue(in_array('fancystring', $type_names), t('Plugin type is registered'));
  }

  /**
   * Confirm that test plugins register properly from the info hook.
   */
  function testBasicHookRegistration() {
    $plugins = plugin_get_info('fancystring');

    $plugin_names = array_keys($plugins);
    $this->assertTrue(in_array('rot13', $plugin_names), t('Plugin type is registered from type-specific hook'));
  }

  /**
   * Confirm that test plugins register properly from the alter hook.
   */
  function testAlterHookRegistration() {
    $plugins = plugin_get_info('fancystring');

    $plugin_names = array_keys($plugins);
    $this->assertTrue(in_array('rot', $plugin_names), t('Plugin type is registered from type-specific alter hook'));
  }
  

  /**
   * Confirm that test plugins register properly from an info file.
   */
  function testInfoRegistration() {
    $plugins = plugin_get_info('fancystring');

    $plugin_names = array_keys($plugins);
    $this->assertTrue(in_array('uppercase', $plugin_names), t('Plugin type is registered from info file'));
  }


  /**
   * Confirm that we get the right controller for a given plugin type.
   */
  /*
  function testController() {
    $controller = plugin_controller('fancystring');

    $this->assertTrue($controller instanceof PluginControllerVariableReuse, t('Correct controller class returned.'));
  }
   
   */

  /**
   * Confirm that if there is no default configuration, we get nothing.
   */
  /*
  function testDefaultPlugin() {
    $plugin = plugin('fancystring');

    $this->assertTrue($plugin instanceof FancyStringDummy, t('Correct plugin class returned.'));
  }
   
   */

}

class PluginTestCommonClassCase extends DrupalWebTestCase {
  protected $regions;

  public static function getInfo() {
    return array(
      'name' => 'Plugin common class tests',
      'description' => 'Test plugins with a common class.',
      'group' => 'Plugin',
    );
  }

  function setUp() {
    parent::setUp('plugin', 'plugin_test');
  }

  /**
   * Confirm that we get the right controller for a given plugin type.
   */
  /*
  function testPluginHello() {
    $plugin = plugin('callback_test');

    $this->assertEqual($plugin->runCallback(), t('Hello world'), t('Passed through to callback properly.'));
  }
   */

}

