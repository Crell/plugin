<?php

function plugin_test_plugin_type_info() {

	$types['fancystring'] = array(
    'title' => t('Fancy string mangling'),
    'description' => t('Mutate strings in various ways'),
    'interface' => 'FancyStringPluginInterface',
    'config' => 'FancyStringConfigInterface',
    'controller' => 'PluginControllerVariableReuse',
    'default' => 'FancyStringDummy',
		);

	return $types;
}

function plugin_test_plugin_info() {

  $plugins['dummy'] = array(
    'title' => t('Dummy'),
    'description' => t('Dummy implementation that does nothing.'),
    'class' => 'FancyStringDummy',
  );
	 $plugins['rot13'] = array(
    'title' => t('ROT 13'),
    'description' => t('ROT13 encode a string'),
    'class' => 'FancyStringRot13',
  );

	return $plugins;
}

function plugin_test_plugin_info_alter(&$plugins) {
  $plugins['rot'] = array(
    'title' => t('ROT'),
    'description' => t('ROT encode a string to an arbitrary number.'),
    'class' => 'FancyStringRot',
    'config' => 'FancyStringRotConfig',
  );
}

interface FancyStringPluginInterface extends PluginInterface {

  public function mutate($string);
}

class FancyStringRot13 extends PluginBaseAbstract implements FancystringPluginInterface {

	public function mutate($string) {
    return str_rot13($string);
	}
}

class FancyStringRot extends PluginBaseAbstract implements FancyStringPluginInterface {

  public function mutate($string) {
    // @TODO: Implement this.
    return $string;
  }

}

class FancyStringDummy extends PluginBaseAbstract implements FancyStringPluginInterface {
  public function mutate($string) {
    return $string;
  }
}

